url<-paste(url_base,page,sep='')
htxt<-read_html(url,encoding="UTF-8")
table<-html_nodes(htxt,".score_result")
content<-html_nodes(table,".score_reple")
content2<-html_nodes(content,paste("#_filtered_ment_",num,sep=''))
reviews<-html_text(content2)
if(length(reviews)==0){break}
all.reviews<-c(all.reviews,reviews)
print(page)
}
}
all.reviews<-c()
for(page in 1:10){
for(num in 1:9){
url<-paste(url_base,page,sep='')
htxt<-read_html(url,encoding="UTF-8")
table<-html_nodes(htxt,".score_result")
content<-html_nodes(table,".score_reple")
content2<-html_nodes(content,paste("#_filtered_ment_",num,sep=''))
reviews<-html_text(content2)
if(length(reviews)==0){break}
all.reviews<-c(all.reviews,reviews)
print(page)
}
}
all.reviews
all.reviews <- gsub("[[:cntrl:]]","",all.reviews)
all.reviews
remDr<-
remoteDriver(port=4445L,browser
Name="chrome")
remDr<-
remoteDriver(port=4445L,browserName="chrome")
remDr$open()
remDr<-
remoteDriver(port=4445,browserName="chrome")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445L,   # port 번호 입력
browserName = "chrome")
remDr$open()
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445L,   # port 번호 입력
browserName = "chrome")
remDr$open()
remDr$navigate("http://www.naver.com")
blogButton<-
remDr$findElement(using="xpath",
value='노드에서 우클릭 -> Copy -> Copy XPath')
blogButton<-
remDr$findElement(using="xpath",
value='//*[@id="PM_ID_ct"]/div[1]/div[2]/div[1]/ul[1]/li[3]/a/span[1]')
blogButton$clickElement()
webElemButton<-
remDr$findElement(using="css selector",
value='//*[@id="header"]/div[1]/div/div[2]/form/fieldset/div/input')
webElemButton<-
remDr$findElement(using="css selector",
value='#header > div.header_common > div > div.area_search > form > fieldset > div > input')
webElemButton$sendKeysToElement(list(key='shift',key='home',key='delete'))
webElemButton$sendKeysToElement(list('최지은'))
clickbutton <- remDr$findElement(using = 'xpath',
value='//*[@id="header"]/div[1]/div/div[2]/form/fieldset/a[1]/i')
clickbutton$clickElement()
html <- read_html(remDr$getPageSource()[1]);Sys.sleep(1)
html <- read_html(remDr$getPageSource()[[1]]);Sys.sleep(1)
content <- html_nodes(html,'.search_number')
num <- html_text(content)
num
remDr$closeall()
remDr$closeServer()
hw <- read.table("clipboard")
hw
pple <- read.table("clipboard")
pple %in% hw
pple$V1 %in% hw$
pple$V1 %in% hw$V1
pple$V1 %in% hw$V1
idx <- pple$V1 %in% hw$V1
pple$V1[!idx,]
pple$V1[!idx]
library(rvest)
url<- 'https://www.youtube.com/watch?v=v7XpDzgUQbg'
htxt <- read_html(url, encoding="UTF-8")
table <- html_nodes(htxt, "yt-formatted-string#text")
reviews <- html_text(table);reviews
table <- html_nodes(htxt, ".yt-simple-endpoint style-scope ytd-toggle-button-renderer")
table
htxt
table <- html_nodes(htxt, ".top-level-buttons")
table
table <- html_nodes(htxt, "div.top-level-buttons")
table
table <- html_nodes(htxt, ".top-level-buttons")
table
table <- html_nodes(htxt, "#top-level-buttons")
table
table <- html_nodes(htxt, ".top-level-buttons")
table <- html_nodes(htxt, "#top-level-buttons")
reviews <- html_text(table);reviews
table1 <- html_nodes(table,"#style-scope ytd-toggle-button-renderer style-text")
table1
table1 <- html_nodes(htxt,"yt-formatted-string#text.style-scope.ytd-toggle-button-renderer.style-text")
table1
table1 <- html_nodes(htxt,"#text.style-scope.ytd-toggle-button-renderer.style-text")
table1
reviews <- html_text(table1);reviews
table1 <- html_nodes(htxt,"#text")
table1
htxt <- read_html(url, encoding="UTF-8")
table1 <- html_nodes(htxt,"#text")
table1 <- html_nodes(htxt,".style-scope.ytd-toggle-button-renderer.style-text")
<yt-formatted-string id="text" class="style-scope.ytd-toggle-button-renderer.style-text" aria-label="좋아요 33,151개">3.3만</yt-formatted-string>
reviews <- html_text(table1);reviews
table1 <- html_nodes(htxt,".style-scope.ytd-toggle-button-renderer.style-text")
reviews <- html_text(table1);reviews
library(shinydashboard)
library(RSelenium)
library(rvest)
# 동영상버튼 클릭
videoButton <-remDr$findElement(using='css selector',value='#tabsContent > paper-tab:nth-child(4)')
library(rJava)
# 1 chromedriver 연결
remDr <- remoteDriver(port=4445,browserName="chrome")
## chrome 창 열기
remDr$open()
## youtube 접속
remDr$navigate("https://www.youtube.com")
SearchButton <- remDr$findElement(using="css selector",value='#search')
SearchButton$sendKeysToElement(list(key='shift',key='home',key='delete'))
SearchButton$sendKeysToElement(list('펭수'))
# 검색하기
pointerButton <- remDr$findElement(using='css selector',value='#search-icon-legacy')
pointerButton$clickElement()
# 자이언트 펭TV 눌러서 접속
pengtvButton <- remDr$findElement(using='xpath',value='//*[@id="contents"]/ytd-channel-renderer')
pengtvButton$clickElement()
# 동영상버튼 클릭
videoButton <-remDr$findElement(using='css selector',value='#tabsContent > paper-tab:nth-child(4)')
videoButton$clickElement()
# 첫 영상
titleButton <-remDr$findElement(using='css selector',value='#items > ytd-grid-video-renderer:nth-child(1)')
titleButton$clickElement()
# 좋아요버튼 크롤링
html <- read_html(remDr$getPageSource()[[1]])
table <- html_nodes(html,".style-text")
table
good <- html_text(table)
good[c(3,6)]
remDr$goBack()
# Good, Bad 미리생성
Good <- c()
Bad <- c()
for (i in 1:5){
titleButton <-remDr$findElement(using='css selector',value=paste("#items >" ,paste("ytd-grid-video-renderer:nth-child(",paste(i,")",sep=""),sep="")))
titleButton$clickElement()
html <- read_html(remDr$getPageSource()[[1]])
Sys.sleep(1)
table <- html_nodes(html,".style-text")
num <- html_text(table)
Good <- c(Good,num[3])
Bad <- c(Bad,num[6])
remDr$goBack()
print(i)
}
for (i in 1:5){
titleButton <-remDr$findElement(using='css selector',value=paste("#items >" ,paste("ytd-grid-video-renderer:nth-child(",paste(i,")",sep=""),sep="")))
titleButton$clickElement()
html <- read_html(remDr$getPageSource()[[1]])
Sys.sleep(1)
table <- html_nodes(html,".style-text")
num <- html_text(table)
Good <- c(Good,num[3])
Bad <- c(Bad,num[6])
remDr$goBack()
print(i)
}
Sys.sleep(4)
for (i in 1:5){
titleButton <-remDr$findElement(using='css selector',value=paste("#items >" ,paste("ytd-grid-video-renderer:nth-child(",paste(i,")",sep=""),sep="")))
titleButton$clickElement()
html <- read_html(remDr$getPageSource()[[1]])
Sys.sleep(4)
table <- html_nodes(html,".style-text")
num <- html_text(table)
Good <- c(Good,num[3])
Bad <- c(Bad,num[6])
remDr$goBack()
print(i)
}
?fileinput
library(shiny)
?fileInput
#데이터 파일을 filepath에 저장
filepath <- "https://quantdev.ssri.psu.edu/sites/qdev/files/student-mat.csv"
data <- read.table(file=url(filepath),sep=";",header=TRUE)
#모든변수 이름을 소문자로 하기
var.names.data <-tolower(colnames(data))
colnames(data) <- var.names.data
head(data)
#필요한 라이브러리
library(caret)
library(class)
library(dplyr)
library(e1071)
#install.packages("gmodels")
#install.packages("FNN")
library(FNN)
library(gmodels)
library(psych)
data_class <- data
# mjob을 예측하려 함(그래서 따로 데이터를 빼줌)
mjob_outcome <- data_class %>% select(mjob)
# mjob을 뺀 데이터
data_class <- data_class %>% select(-mjob)
str(data_class)
##세 가지 이상의 level 없애기, yes/no factor(level이 numeric인 거) 없애기
##필요한 부분만 쓰기
data_class<-data_class %>% select(age, traveltime, studytime,failures,health,school,sex,address,famsize)
head(data_class)
##1-1 정규화 시켜주기+더미화 시켜주기#####################################3
##scale(numeric 부분을 정규화 시켜줌)
normalize <- function(x){
return ((x-min(x)) / (max(x)-min(x)))
}
data_class[, c("age","traveltime",
"studytime", "failures", "health")] <- as.data.frame(apply(data_class[, c("age", "traveltime", "studytime", "failures", "health")],2,normalize))
head(data_class)
str(data_class)
#level이 numeric이 아닌 4가지 변수--dummy.code
##이 부분은 ppt에서 설명 해주면 문제로 나가고, 아니면 설명추가해서 힌트로 주기
data_class$school <- dummy.code(data_class$school)
data_class$sex <- dummy.code(data_class$sex)
data_class$address <- dummy.code(data_class$address)
data_class$famsize <- dummy.code(data_class$famsize)
str(data_class$famsize)
model.matrix(data$famsize)
model.matrix(~ 0+famsize, data=data)
data$famsize <- model.matrix(~0+famsize, data=data)
data$famsize
#데이터 파일을 filepath에 저장
filepath <- "https://quantdev.ssri.psu.edu/sites/qdev/files/student-mat.csv"
#url() function을 이용해서 파일 열기
data <- read.table(file=url(filepath),sep=";",header=TRUE)
data1 <- data
data1 <- model.matrix(~0+.,data=data)
data1
as.data.frame(data1)
data1 <- as.data.frame(data1)
data1$age
data1 <- model.matrix(~0+.,data=data) %>% as.data.frame()
data1 <- model.matrix(~.,data=data) %>% as.data.frame()
data1
data1 <- model.matrix(~0+school+sex,data=data) %>% as.data.frame()
data1
data1 <- model.matrix(~0+school+sex,data=data) %>% as.data.frame()
head(data1)
dummyVars(~.,data=data,fullRank = T)
dum <- dummyVars(~., data=data, fullrank=T)
train_dum <- as.data.frame(predict(dum, newdata=data))
train_dum
model.matrix(~ 0+sex+school, data=data,
contrasts.arg=list(sex=contrasts(data$sex, contrasts=F),
school=contrasts(data$school, contrasts=F)))
data1 <- model.matrix(~ ., data=data,
contrasts.arg = lapply(data[,1:ncol(data)], contrasts, contrasts=FALSE))
names(Filter(is.factor, data))
data1 <- model.matrix(~ ., data=data,
contrasts.arg = lapply(data[,names(Filter(is.factor,data))], contrasts, contrasts=FALSE))
data1 <- as.data.frame(data1)
head(data1)
read.csv("코로나.csv")
setwd("C:/Users/jieun/Desktop")
read.csv("코로나.csv")
read.table("코로나.xlsx")
setwd("C:/Users/jieun/download")
setwd("C:/Users/jieun/downloads")
read.table("patient.csv")
read.csv("patient.csv",header = T)
patient <- read.csv("patient.csv",header = T)
head(patient)
table(patient$country)
2019-1997
patient$age = 2020-patient$birth_year+1
patient$age
colSums(is.na(patient))
patient <- read.csv("COVID19_open_line_list",header = T)
patient <- read.csv("COVID19_open_line_list.csv",header = T)
setwd("C:/Users/jieun/downloads/COVID19_open_line_list.csv")
patient <- read.csv("COVID19_open_line_list.csv",header = T)
patient
patient %>% filter(country=="south korea")
patient <- read.csv("COVID19_open_line_list.csv",header = T)
patient %>% filter(country=="South Korea")
setwd("C:/Users/jieun/downloads")
patient <- read.csv("patient.csv",header = T)
patient
head(patient)
colSums(is.na(patient))
table(data$sex)
setwd("C:/Users/jieun/Desktop")
patient <- read.csv("corona.csv",header = T)
patient <- read.csv("corona.csv",header = T,fileEncoding = "UTF-8")
patient <- read.csv("corona.csv",header = T,encoding="UTF-8")
patient <- read.csv("corona.csv",header = T)
patient <- read.csv("corona.csv",header = T)
patient
colSums(is.na(patient))
ggplot(data=patient, aes(x="", y=sex, fill=Type))+
geom_bar(width=1) +
coord_polar(theta="y")
ggplot(data=patient, aes(x="", y=성별, fill=Type))+
geom_bar(width=1)
ggplot(data=patient, aes(x="", y=성별))+
geom_bar(width=1)
ggplot(data=patient, aes(x=성별))+
geom_bar(width=1)
table(patient$성별)
setwd("C:/Users/jieun/Downloads")
patient <- read.csv("patient",header = T,)
setwd("C:/Users/jieun/Downloads")
patient <- read.csv("patient.csv",header = T,)
patient
table(patient$sex)
patient[patient=="",] <- NA
patient[patient=="",]
patient==""
patient[[which(patient=="")]]
which(patient=="")
which(patient=="",arr.ind = T)
colSums(patient=="")
setwd("C:/Users/jieun/Downloads/COVID19_open_line_list.csv")
patient <- read.csv("COVID19_open_line_list.csv.csv",header = T,)
patient <- read.csv("COVID19_open_line_list.csv",header = T,)
patient
colSums(patient=="")
colSums(is.na(patient))
lapply(1:ncol(patient),patient[which(patient[[x]]=="",arr.ind = T),] <- NA)
lapply(1:ncol(patient),function(x)patient[which(patient[[x]]=="",arr.ind = T),] <- NA)
sapply(1:ncol(patient),function(x)patient[which(patient[[x]]=="",arr.ind = T),] <- NA)
sapply(1:ncol(patient),function(x)patient[which(patient[[x]]==""),] <- NA)
sapply(1:ncol(patient),function(x)patient[patient[[x]]=="",] <- NA)
sapply(1:ncol(patient),function(x)patient[patient[x]=="",] <- NA)
patient[patient==""] <- NA
patient
patient <- read.csv("COVID19_open_line_list.csv",header = T)
table(patient$sex)
patient[patient==""] <- NA
table(patient$sex)
patient[patient=="N/A"] <- NA
table(patient$sex)
patient$sex <- ifelse(patient$sex=="male","Male",
ifelse(patient$sex)=="female","Female",patient$sex)
patient$sex <- ifelse(patient$sex=="male","Male",
ifelse(patient$sex=="female","Female",patient$sex))
table(patient$sex)
patient <- read.csv("COVID19_open_line_list.csv",header = T)
table(patient$sex)
patient[patient==""] <- NA
patient[patient=="N/A"] <- NA
patient$sex <- ifelse(patient$sex=="male","Male",
ifelse(patient$sex=="female","Female",patient$sex))
str(patient$sex)
patient$sex <- ifelse(patient$sex=="male","Male",
ifelse(patient$sex=="female","Female",as.character(patient$sex)))
table(patient$sex)
str(patient$sex)
which(patient$sex==4)
setwd("C:/Users/jieun/Dekstop/answer")
setwd("C:/Users/jieun/Desktop/answer")
shiny::runApp()
summary(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/jieun/Desktop/3주차")
runApp()
runApp()
setwd("C:/Users/jieun/Desktop/answer")
runApp()
runApp()
library(readr)
library(dplyr)
library(data.table)
#1.데이터 불러오기+전처리-----------
setwd("C:/Users/jieun/Desktop")
data <- read_csv("LHJ_설문코딩데이터(final).csv") %>% as.data.table()
data
data <- read.csv("LHJ_설문코딩데이터(final).csv") %>% as.data.table()
data
col_name <- colnames(data)
data <- sapply(1:ncol(data),function(x){
ifelse(data[[x]]=="#NULL!",NA,data[[x]])
}) %>% as.data.frame()
colnames(data) <- col_name
data
head(data)
#2-1.학습부진 학생 실태의 차이 일반VS특수(0.01%의 유의수준)---------------
col_name %>% filter(starts_with("A1."))
col_name
table(second$A7)
second <- data %>%
select(starts_with("A7"),starts_with("B1.")) %>%
filter(A7!=2)
col_name %>% filter(starts_with("A1."))
table(second$A7)
multi_logit_m <- multinom(Species~Petal.Length+Petal.Width+Sepal.Length+Sepal.Width, data=iris)
library(nnet)
multi_logit_m <- multinom(Species~Petal.Length+Petal.Width+Sepal.Length+Sepal.Width, data=iris)
predict(multi_logit_m,newdata = data.frame(1,2,3,4))
predict(multi_logit_m,newdata = data.frame(Petal.Length=1,2,3,4))
predict(multi_logit_m,newdata = data.frame(Petal.Length=1,
Petal.Width=2,
Sepal.Length=3,
Sepal.Width =4))
predict(multi_logit_m,newdata = data.frame(Petal.Length=1,
Petal.Width=2,
Sepal.Length=3,
Sepal.Width =4),type = "probs")
set.seed(0921)
train_idx <- sample(1:nrow(iris), nrow(iris) * 0.7 )
test_idx <- setdiff(1:nrow(iris),train_idx)
train <- iris[train_idx,]
multi_logit_m <- multinom(Species~Petal.Length+Petal.Width+Sepal.Length+Sepal.Width, data=train)
predict(multi_logit_m,newdata = data.frame(Petal.Length=1,
Petal.Width=2,
Sepal.Length=3,
Sepal.Width =4),type = "probs")
set.seed(0921)
train_idx <- sample(1:nrow(iris), nrow(iris) * 0.7 )
test_idx <- setdiff(1:nrow(iris),train_idx)
train <- iris[train_idx,]
multi_logit_m <- multinom(Species~Petal.Length+Petal.Width+Sepal.Length+Sepal.Width, data=train)
predict(multi_logit_m,newdata = data.frame(Petal.Length=1,
Petal.Width=2,
Sepal.Length=3,
Sepal.Width =4),type = "probs")
setwd("C:/Users/jieun/Desktop/answer")
shiny::runApp()
second <- data %>%
select(starts_with("A7"),starts_with("B1.")) %>%
filter(A7!=2)
second <- second[,c(1,7:10,27:29,39,40,58,66:69)]
second[,colnames(second)] <- lapply(second[ , colnames(second)], as.numeric)
t.test_result <- sapply(2:ncol(second),function(x){
t.test(second[second$A7==1,x],second[second$A7==3,x],var.equal = T)$p.value
})
idx1 <- which(t.test_result<=0.01)
colnames(second[,(idx1+1)])
data %>%
select(starts_with("A"),starts_with("B1."))
data %>%
select(starts_with("A1"|"A2"),starts_with("B1."))
data %>%
select(starts_with("A1|A2"),starts_with("B1."))
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")
)
second <- data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1."))
##2-1.일반VS특수(0.01%의 유의수준)---------------
nchar(colnames(second))
##2-1.일반VS특수(0.01%의 유의수준)---------------
nchar(colnames(second)) < 5
##2-1.일반VS특수(0.01%의 유의수준)---------------
colnames(nchar(colnames(second)) <= 5)
##2-1.일반VS특수(0.01%의 유의수준)---------------
colnames[nchar(colnames(second)) <= 5]
nchar(colnames(second)) <= 5
##2-1.일반VS특수(0.01%의 유의수준)---------------
colnames(second[nchar(colnames(second)) <= 5])
##2-1.일반VS특수(0.01%의 유의수준)---------------
colnames(second[nchar(colnames(second)) <= 6])
##2-1.일반VS특수(0.01%의 유의수준)---------------
colnames(second[nchar(colnames(second)) <= 5])
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
nchar(colnames(.))
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.)
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.) %>% nchar(.)
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.) %>%
select(nchar(.) >= 5)
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.)
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.) %>%
nchar(.) >= 5
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.)[nchar(colnames(.)) >= 5]
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.)
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
colnames(.)[nchar(colnames(.)) >= 5]
data %>%
select("A1","A2","A3","A5","A7",starts_with("A7"),starts_with("B1.")) %>%
nchar(colnames(.))
